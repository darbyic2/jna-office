/* Copyright (c) 2013 Ian Darby, All Rights Reserved
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.  
 */

package com.sun.jna.platform.win32.office.outlook;

import com.sun.jna.platform.win32.OleAuto;
import com.sun.jna.platform.win32.COM.COMException;
import com.sun.jna.platform.win32.COM.COMUtils;
import com.sun.jna.platform.win32.COM.IDispatch;
import com.sun.jna.platform.win32.Variant.VARIANT;
import com.sun.jna.platform.win32.WinNT.HRESULT;
import com.sun.jna.platform.win32.office.COMObjectHelper;

/**
 * All Outlook wrapper objects are derived from this class.
 * 
 * @author Ian Darby
 * 
 */
public class BaseOutlookObject extends COMObjectHelper {
	
	/**
	 * Constructor scope is restricted to inheritance and package as it should
	 * not be used directly by user applications. It is only intended to be used
	 * from within factory methods and properties of the Outlook object model
	 * itself. It may also be called from unit tests which may supply a mock
	 * version of the IDispatch object.
	 * 
	 * @param iDisp
	 *            the IDispatch object which is the underlying Actions object
	 *            within the Outlook object model. All methods and properties of
	 *            this wrapper class ultimately delegate to IDispatch.
	 */
	protected BaseOutlookObject(IDispatch iDispatch) {
		super(iDispatch);
	}
	
	/**
	 * Public constructor for derived classes which can be directly created by
	 * the client application. These objects must be create-able via the
	 * CreateObject(...) mechanism for this to work.
	 * <p>
	 * The vast majority of derived classes will not expose this constructor as
	 * they are only intended to be generated by factory methods within the
	 * target object model. Generally only the &quot;Application&quot; object is
	 * create-able in this way.
	 * </p>
	 * 
	 * @param progId
	 *            Programme ID of application object. For example
	 *            &quot;Outlook.Application&quot;.
	 * 
	 * @param useActiveInstance
	 *            boolean flag indicating whether to try and use an existing
	 *            running instance (true); or to create a new instance (false).
	 * 
	 * @throws COMException
	 *             the automation exception that is thrown if things go wrong.
	 */
	public BaseOutlookObject(String progId, boolean useActiveInstance)
			throws COMException {
		
		super(progId, useActiveInstance);
	}

	
	/**
	 * All objects in the Outlook object model support the
	 * &quot;Application&quot; property to obtain a quick reference to the
	 * parent application instance.
	 * 
	 * @return a newly wrapped instance of the parent Outlook application
	 *         object.
	 */
	public Outlook getApplication() {
		
		VARIANT.ByReference result = new VARIANT.ByReference();
		HRESULT hr = this.oleMethod(OleAuto.DISPATCH_PROPERTYGET, result, this.iDispatch,
				"Application");

		if (COMUtils.SUCCEEDED(hr))
			return new Outlook((IDispatch) result.getValue());
		else
			return null;
	}
	
	/**
	 * Unique integer value identifying which class within the object model this
	 * is an instance of. All objects within the model support this property.
	 * <p>
	 * These values are defined in {@link ClassEnum} and map directly to the
	 * values within the MS OlObjectClass enumeration. This enum has not been
	 * replicated using the type-safe mechanism used for all other enums as it
	 * is necessary to use these public values directly in case statements.
	 * </p>
	 * 
	 * @return Unique integer value identifying which class within the object
	 *         model this is an instance of.
	 */
	public int getClassEnumValue() {
		
		return getIntProperty("Class");
	}
	
	/**
	 * Returns the NameSpace object for the current session (session: A period
	 * of time during which a client uses the messaging system.). Read-only.
	 * <p>
	 * All objects within the Outlook model support the getSession() property.
	 * </p>
	 * <p>
	 * The Session property and the GetNamespace method can be used
	 * interchangeably to obtain the NameSpace object for the current session.
	 * Both members serve the same purpose. For example, the following
	 * statements do the same function:
	 * <ul>
	 * <li>Namespace ns = outlookApp.getNamespace("MAPI");</li>
	 * 
	 * <li>Namespace ns = someOutlookObject.getSession();</li>
	 * </ul>
	 * </p>
	 * 
	 * @return the NameSpace object for the current session.
	 */
	public Namespace getSession() {
		
		return new Namespace(getAutomationProperty("Session"));
	}
	
}
